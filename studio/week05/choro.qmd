---
title: Visualization for Area Unit Data
author: Serge Rey
date: '2023-02-23'
execute:
  enabled: true
format:
  revealjs:
    theme: simple
    transition: slide
    slide-number: false
    center: true
    toc: true
    toc-title: Outline
    toc-depth: 1
    incremental: true
    css: ../../css/custom-reveal.scss
echo: true
---




#  Areal Unit Data

## Imports
```{python}
#| tags: []
import geopandas
import libpysal
```

## Example
```{python}
#| tags: []
south = libpysal.examples.load_example('South')
```

## Inspecting the example
```{python}
#| tags: []
libpysal.examples.explain('South')
```

## Reading the shapefile
```{python}
#| tags: []
south_gdf = geopandas.read_file(south.get_path('south.shp'))
```

# Choropleth Mapping

## Plotting the Geometries

```{python}
#| tags: []
south_gdf.plot()
```

## Plotting the attribute distribution
```{python}
#| tags: []
import seaborn
```

## Plotting the attribute distribution
```{python}
#| tags: []
seaborn.displot(south_gdf, x='HR60')
```

## Alternative view of the attribute distribution
```{python}
#| tags: []
south_gdf.HR60.describe()
```

## Spatial Distribution (Default Choropleth)
```{python}
#| tags: []
south_gdf.plot(column='HR60')
```

## Spatial Distribution (Changing the classification)
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles')
```

## Spatial Distribution (Adding a legend)
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True)
```

# Classification Schemes

$$c_j \lt y_i \le c_{j+1} \forall y_i \in C_j$$

where $y_i$ is the value for the attribute at location $i$, $j$ is a class index, and $c_j$ represents the lower bound of interval $j$.

## Mapclassify

```{python}
#| tags: []
import mapclassify
```

## Quantiles
```{python}
#| tags: []
mapclassify.Quantiles(south_gdf.HR60)
```

## Quantiles: Changing the number of classes
```{python}
#| tags: []
mapclassify.Quantiles(south_gdf.HR60, k=10)
```

## Equal Interval

```{python}
#| tags: []
mapclassify.EqualInterval(south_gdf.HR60, k=10)
```

## Maximum Breaks
```{python}
mapclassify.MaximumBreaks(south_gdf.HR60, k=10)
```
## Fisher-Jenks
```{python}
mapclassify.FisherJenks(south_gdf.HR60, k=10)
```
## BoxPlot
```{python}
mapclassify.BoxPlot(south_gdf.HR60)
```

## Head Tail
```{python}
mapclassify.HeadTailBreaks(south_gdf.HR60)
```

# Map Customization

## Customization

- Legends
- Color Schemes


## Legends

```{python}
#| tags: []
south_gdf[['STATE_NAME', 'HR60', 'HR90']].head()
```

## Create a Boolean variable
```{python}
#| tags: []
south_gdf['increased' ] =  south_gdf.HR90 > south_gdf.HR60
```

## Mapping the Boolean variable

```{python}
#| tags: []
south_gdf.plot(column='increased', categorical=True, legend=True);
```
## Change the values
```{python}
#| tags: []
v = south_gdf.increased.map({True: 'Increased', False: 'Decreased'})
south_gdf['Increased'] = v
```

## Map the new variable

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True);
```
## Legend Positioning

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (1.3, 1)});
```
## Legend Title
```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (1.3, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```
## More Adjustments

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```

## More Adjustments
```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```

## Color schemes

- For more info see [matplotlib](https://matplotlib.org/stable/tutorials/colors/colormaps.html)
- ColorBrewer

## Sequential Color Schemes

```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='Blues');
```
## Change the color map: Single Hue
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='Greens');
```

## Change the color map: Multiple Hues
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu');
```

## Diverging Color Map

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
               cmap='coolwarm',
           );
```

## Alternative Diverging Color Map

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
               cmap='bwr',
           );
```

## Qualitative Color Scheme

```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True)
```

## Qualitative Color Scheme
```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True, legend=True)
```

## Qualitative Color Scheme
```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1)})
```

## Qualitative Color Scheme
```{python}
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0, 0, 1, 1])
ax.axis('off')

south_gdf.plot(column='STATE_NAME', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1)}, ax=ax);
```

## Comparisons
- Deciles
- Maximum Breaks
- Fisher Jenks

## Deciles

```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```

## Maximum Breaks
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='MaximumBreaks', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```

## Fisher Jenks
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='FisherJenks', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```


