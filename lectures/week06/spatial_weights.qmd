---
title: Spatial Weights
author: Serge Rey
execute:
  enabled: true
format:
  revealjs:
    theme: simple
    transition: slide
    slide-number: false
    center: true
    toc: true
    toc-title: Outline
    toc-depth: 1
    incremental: true
    css: ../../css/custom-reveal.scss
echo: true
---

# Spatial Weights

Spatial weights are mathematical structures used to represent spatial relationships. Many spatial analytics, such as spatial autocorrelation statistics and regionalization algorithms rely on spatial weights. Generally speaking, a spatial weight $w_{i,j}$ expresses the notion of a geographical relationship between locations $i$ and $j$. These relationships can be based on a number of criteria including contiguity, geospatial distance and general distances.

libpysal offers functionality for the construction, manipulation, analysis, and conversion of a wide array of spatial weights.

We begin with construction of weights from common spatial data formats.

## Imports

```{python}
import warnings
warnings.simplefilter("ignore")
```

```{python}
import libpysal 
from libpysal.weights import Queen, Rook, KNN, Kernel, DistanceBand
import numpy as np
import geopandas
import pandas
%matplotlib inline
import matplotlib.pyplot as plt
```

```{python}
from splot.libpysal import plot_spatial_weights
```

There are functions to construct weights directly from a file path. 

## Weight Types

- Contiguity
- Distance Based Weights

# Contiguity Weights

## Contiguity Weights

- Alternative Definitions
 - Queen
 - Rook
 - Bishop

## Queen Weights

A commonly-used type of weight is a queen contigutiy weight, which reflects adjacency relationships as a binary indicator variable denoting whether or not a polygon shares an edge or a vertex with another polygon. These weights are symmetric, in that when polygon $A$ neighbors polygon $B$, both $w_{AB} = 1$ and $w_{BA} = 1$.

## Constructing Queen Weights
To construct queen weights from a shapefile, we will use geopandas to read the file into a GeoDataFrame, and then use   libpysal to construct the weights:

```{python}
path = "~/data/scag_region.parquet"
df = geopandas.read_parquet(path)
df = df.to_crs(26911)  #UTM zone 11N
qW = Queen.from_dataframe(df)
qW
```

## Weight Attributes
All weights objects have a few traits that you can use to work with the weights object, as well as to get information about the weights object. 

To get the neighbors & weights around an observation, use the observation's index on the weights object, like a dictionary:

```{python}
qW[155] #neighbors & weights of the 156th observation (0-index remember)
```



## Weights Matrix
A full, dense matrix describing all of the pairwise relationships is constructed using the `.full` method, or when `libpysal.weights.full` is called on a weights object:

```{python}
Wmatrix, ids = qW.full()
#Wmatrix, ids = libpysal.weights.full(qW)
```

```{python}
Wmatrix
```

## Number of Neighbors

```{python}
n_neighbors = Wmatrix.sum(axis=1) # how many neighbors each region has
```

```{python}
n_neighbors[155]
```

```{python}
qW.cardinalities[155]
```

Note that this matrix is binary, in that its elements are either zero or one, since an observation is either a neighbor or it is not a neighbor. 

## Standardization

However, many common use cases of spatial weights require that the matrix is row-standardized. This is done simply in PySAL using the `.transform` attribute

```{python}
qW.transform = 'r'
```

Now, if we build a new full matrix, its rows should sum to one:

```{python}
Wmatrix, ids = qW.full()
```

```{python}
Wmatrix.sum(axis=1) #numpy axes are 0:column, 1:row, 2:facet, into higher dimensions
```


## Sparse Weights
Since weight matrices are typically very sparse, there is also a sparse weights matrix constructor:

```{python}
qW.sparse
```

```{python}
qW.pct_nonzero #Percentage of nonzero neighbor counts
```

## Neighbors
Let's look at the neighborhoods of the 101th observation

```{python}
qW.neighbors[100]
```

```{python}
len(qW.neighbors[100])
```

## Plotting

```{python}
plot_spatial_weights(qW, df)
```
## Connectivity Histogram
```{python}
pandas.Series(qW.cardinalities).plot.hist(bins=9)
```
## Cardinalities
```{python}
qW.cardinalities.values()
```
	
## Rook Weights

Rook weights are another type of contiguity weight, but consider observations as neighboring only when they share an edge. The rook neighbors of an observation may be different than its queen neighbors, depending on how the observation and its nearby polygons are configured. 

We can construct this in the same way as the queen weights:

```{python}
rW = Rook.from_dataframe(df)
```

```{python}
rW.neighbors[100]
```

```{python}
len(rW.neighbors[100])
```
## Rook Graph
```{python}
plot_spatial_weights(rW, df)
```

## Connectivity Histogram
```{python}
pandas.Series(rW.cardinalities).plot.hist(bins=9)
```

## Bishop Weights

In theory, a "Bishop" weighting scheme is one that arises when only polygons that share vertexes are considered to be neighboring. But, since Queen contiguigy requires either an edge or a vertex and Rook contiguity requires only shared edges, the following relationship is true:

$$ \mathcal{Q} = \mathcal{R} \cup \mathcal{B} $$

where $\mathcal{Q}$ is the set of neighbor pairs *via* queen contiguity,
 $\mathcal{R}$ is the set of neighbor pairs *via* Rook contiguity, and
 $\mathcal{B}$ *via* Bishop contiguity.
 
## Bishop Weights

$$ \mathcal{Q} \setminus \mathcal{R} = \mathcal{B}$$

Bishop weights entail all Queen neighbor pairs that are not also Rook neighbors.

## Bishop Weights

PySAL does not have a dedicated bishop weights constructor, but you can construct very easily using the `w_difference` function. This function is one of a family of tools to work with weights, all defined in `libpysal.weights`, that conduct these types of set operations between weight objects.

```{python}
bW = libpysal.weights.w_difference(qW, rW, constrained=False)
```
## Bishop Graph
```{python}
plot_spatial_weights(bW, df)
```




## Connectivity

```{python}
bW.histogram
```

Thus, many tracts have no bishop neighbors. But, a few do. 

## Bishop Connectivity Graph

```{python}
plot_spatial_weights(bW, df)
```

# Distance Based Weights
## Distance

There are many other kinds of weighting functions in PySAL. Another separate type use a continuous measure of distance to define neighborhoods. 


```{python}
df.crs
```

## Threshold Based Neighbors
Our coordinate system (UTM 11N) measures distance in meters, so that's how we'll define our neighbors

```{python}
dist_band = DistanceBand.from_dataframe(df, threshold=2000)
```
## Plotting Threshold Neighbor Graph
```{python}
plot_spatial_weights(dist_band,df)
```


## knn defined weights

```{python}
radius_mile = libpysal.cg.sphere.RADIUS_EARTH_MILES
radius_mile
```

```{python}
df_latlong = df.to_crs(4326)
```

## Wrong Way to define KNN

```{python}
knn8_bad = KNN.from_dataframe(df_latlong, k=8) # ignore curvature of the earth
```
## Bad KNN
```{python}
knn8_bad.histogram
```

## Correct Way to define KNN
```{python}
knn8 = KNN.from_dataframe(df_latlong, k=8, radius=radius_mile)
```

## Correct KNN

```{python}
knn8.histogram
```
## Comparison
```{python}
knn8_bad.neighbors[1487]
```

```{python}
knn8.neighbors[1487]
```

```{python}
set(knn8_bad.neighbors[1487]) == set(knn8.neighbors[1487])
```

## Kernel W

Kernel Weights are continuous distance-based weights that use kernel densities to define the neighbor relationship.
Typically, they estimate a `bandwidth`, which is a parameter governing how far out observations should be considered neighboring. Then, using this bandwidth, they evaluate a continuous kernel function to provide a weight between 0 and 1.

Many different choices of kernel functions are supported, and bandwidths can either be fixed (constant over all units) or adaptive in function of unit density.

For example, if we want to use **adaptive bandwidths for the map and weight according to a gaussian kernel**:

## Adaptive gaussian kernel weights

bandwidth = the distance to the kth nearest neighbor for each
                  observation
   
bandwith is changing across observations

```{python}
kernelWa = Kernel.from_dataframe(df, k=10, fixed=False, function='gaussian')
```

## Kernel Weights

```{python}
plot_spatial_weights(kernelWa, df)
```
## Kernel Weights (Continuous)

```{python}
kernelWa.weights[0]
```
## Adaptive bandwidths

```{python}
kernelWa.bandwidth
```

## Adaptive bandwidths
```{python}
df.assign(bw=kernelWa.bandwidth.flatten()).plot('bw', cmap='Reds')
```

## Block Weights

```{python}
w,s,e,n = df.total_bounds
```

```{python}
mx = (w+e)/2
my = (n+s)/2
```

```{python}
import shapely
centroids = df.geometry.centroid
lon = centroids.apply(lambda p: p.x).values
lat = centroids.apply(lambda p: p.y).values
```

## Regions

```{python}
north = lat > my
south = lat <= my
east = lon > mx
west = lon <= mx
```

```{python}
nw = west * north * 2
ne = east * north * 1
sw = west * south * 3
se = east * south *4
quad = nw + ne + sw + se
```

```{python}
quad
```

## Regions

```{python}
df['quad'] = quad
df.plot(column="quad", categorical=True)
```

## Block Weights

```{python}
blockW = libpysal.weights.block_weights(df["quad"])
```

```{python}
blockW.n
```

```{python}
blockW.pct_nonzero
```

## Connectivity

```{python}
pandas.Series(blockW.cardinalities).plot.hist()
```

## Region Membership

```{python}
df.groupby(by='quad').count()
```

# Conclusion   ##



## Recap of Key Points ###

- Spatial Weights
- Contiguity Weights
- Distance Based Weights

## Questions ###

<div style="text-align: center;">
  <img src="../week01/images/question.jpg" style="max-width: 60%; height: auto;">
</div>

