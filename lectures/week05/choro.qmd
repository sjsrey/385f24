---
title: Visualization for Area Unit Data
author: Serge Rey
execute:
  enabled: true
format:
  revealjs:
    theme: simple
    transition: slide
    slide-number: false
    center: true
    toc: true
    toc-title: Outline
    toc-depth: 1
    incremental: true
    css: ../../css/custom-reveal.scss
echo: true
---




#  Areal Unit Data

## Imports
```{python}
#| tags: []
import geopandas
import libpysal
```

## Example
```{python}
#| tags: []
south = libpysal.examples.load_example('South')
```

## Inspecting the example
```{python}
#| tags: []
libpysal.examples.explain('South')
```

## Reading the shapefile
```{python}
#| tags: []
south_gdf = geopandas.read_file(south.get_path('south.shp'))
```

# Choropleth Mapping

## Plotting the Geometries

```{python}
#| tags: []
south_gdf.plot()
```

## Plotting the attribute distribution
```{python}
#| tags: []
import seaborn
```

## Plotting the attribute distribution
```{python}
#| tags: []
seaborn.displot(south_gdf, x='HR60')
```

## Alternative view of the attribute distribution
```{python}
#| tags: []
south_gdf.HR60.describe()
```

## Spatial Distribution (Default Choropleth)
```{python}
#| tags: []
south_gdf.plot(column='HR60')
```

## Spatial Distribution (Changing the classification)
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles')
```

## Spatial Distribution (Adding a legend)
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True)
```

# Classification Schemes

$$c_j \lt y_i \le c_{j+1} \forall y_i \in C_j$$

where $y_i$ is the value for the attribute at location $i$, $j$ is a class index, and $c_j$ represents the lower bound of interval $j$.

## Mapclassify

```{python}
#| tags: []
import mapclassify
```

## Quantiles
```{python}
#| tags: []
mapclassify.Quantiles(south_gdf.HR60)
```

## Quantiles: Changing the number of classes
```{python}
#| tags: []
mapclassify.Quantiles(south_gdf.HR60, k=10)
```

## Equal Interval

```{python}
#| tags: []
mapclassify.EqualInterval(south_gdf.HR60, k=10)
```

## Maximum Breaks
```{python}
mapclassify.MaximumBreaks(south_gdf.HR60, k=10)
```
## Fisher-Jenks
```{python}
mapclassify.FisherJenks(south_gdf.HR60, k=10)
```
## BoxPlot
```{python}
mapclassify.BoxPlot(south_gdf.HR60)
```

## Head Tail
```{python}
mapclassify.HeadTailBreaks(south_gdf.HR60)
```

# Map Customization

## Customization

- Legends
- Color Schemes


## Legends

```{python}
#| tags: []
south_gdf[['STATE_NAME', 'HR60', 'HR90']].head()
```

## Create a Boolean variable
```{python}
#| tags: []
south_gdf['increased' ] =  south_gdf.HR90 > south_gdf.HR60
```

## Mapping the Boolean variable

```{python}
#| tags: []
south_gdf.plot(column='increased', categorical=True, legend=True);
```
## Change the values
```{python}
#| tags: []
v = south_gdf.increased.map({True: 'Increased', False: 'Decreased'})
south_gdf['Increased'] = v
```

## Map the new variable

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True);
```
## Legend Positioning

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (1.3, 1)});
```
## Legend Title
```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (1.3, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```
## More Adjustments

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```

## More Adjustments
```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
           );
```

## Color schemes

- [matplotlib ](https://matplotlib.org/stable/tutorials/colors/colormaps.html) @hunter2007Matplotlib2Da
- ColorBrewer @harrower2003ColorBrewerorgOnline
[![colorbrewer](colorbrewer.png)](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)

## Sequential Color Schemes

```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='Blues');
```
## Change the color map: Single Hue
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='Greens');
```

## Change the color map: Multiple Hues
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu');
```

## Diverging Color Map

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
               cmap='coolwarm',
           );
```

## Alternative Diverging Color Map

```{python}
#| tags: []
south_gdf.plot(column='Increased', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (-0.1, 1),
                           'title':'Homicide Rates 1960-1990'},
               cmap='bwr',
           );
```

## Qualitative Color Scheme

```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True)
```

## Qualitative Color Scheme
```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True, legend=True)
```

## Qualitative Color Scheme
```{python}
#| tags: []
south_gdf.plot(column='STATE_NAME', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1)})
```

## Qualitative Color Scheme
```{python}
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0, 0, 1, 1])
ax.axis('off')

south_gdf.plot(column='STATE_NAME', categorical=True, legend=True,
               legend_kwds={'bbox_to_anchor': (0, 1)}, ax=ax);
```

## Comparisons
- Deciles
- Maximum Breaks
- Fisher Jenks

## Deciles

```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='Quantiles', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```

## Maximum Breaks
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='MaximumBreaks', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```

## Fisher Jenks
```{python}
#| tags: []
south_gdf.plot(column='HR60', scheme='FisherJenks', legend=True, 
                legend_kwds={'bbox_to_anchor': (1.3, 1)},
               cmap='YlGnBu', k=10);
```



## Statistical Fit
```{python}
#| tags: []
y = south_gdf.HR60
q10 = mapclassify.Quantiles(y, k=10)
mb10 = mapclassify.MaximumBreaks(y, k=10)
fj10 = mapclassify.FisherJenks(y, k=10)
print(f'Deciles: {q10.adcm:.1f}, MB: {mb10.adcm:.1f}, FJ: {fj10.adcm:.1f}')
```


## Statistical Fit
```{python}
#| echo: false
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

ec = 'gray'
y = south_gdf.HR60
q10 = mapclassify.Quantiles(y, k=10)
mb10 = mapclassify.MaximumBreaks(y, k=10)
fj10 = mapclassify.FisherJenks(y, k=10)

south_gdf.plot(column='HR60', scheme='Quantiles', legend=False, 
               cmap='YlGnBu', k=10, ax=axes[0], edgecolor=ec);
axes[0].set_title(f"Deciles: {q10.adcm:.1f}")
south_gdf.plot(column='HR60', scheme='MaximumBreaks',legend=False, 
               cmap='YlGnBu', k=10, ax=axes[1], edgecolor=ec);
axes[1].set_title(f"Maximum Breaks: {mb10.adcm:.1f}")


south_gdf.plot(column='HR60', scheme='FisherJenks', legend=False, 
               cmap='YlGnBu', k=10, ax=axes[2], edgecolor=ec);
axes[2].set_title(f"Fisher Jenks: {fj10.adcm:.1f}")
# Show the plots
plt.tight_layout()
plt.show()

```



# Conclusion   ##



## Recap of Key Points ###

- Areal Unit Data
- Choropleth Mapping
- Classification Schemes
- Map Customization

## Questions ###

<div style="text-align: center;">
  <img src="../week01/images/question.jpg" style="max-width: 60%; height: auto;">
</div>


  
	  
## References 


