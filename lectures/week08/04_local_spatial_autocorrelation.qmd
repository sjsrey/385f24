---
title: Local Spatial Autocorrelation
format: html
jupyter: python3
---
    
In today's lecture, we will delve into the concept of **local spatial autocorrelation**, an essential tool in geographic data science that allows us to explore spatial patterns at a more granular level. While global measures like Moranâ€™s I provide an overall summary of spatial autocorrelation across an entire region, local spatial autocorrelation helps identify specific areas where values cluster or where unusual spatial patterns emerge. By examining local indicators of spatial association (LISA), we can detect hotspots, cold spots, and outliers, which are critical for understanding localized spatial phenomena. This approach is particularly valuable in fields like public health, urban studies, and environmental monitoring, where localized insights can inform targeted interventions.

We first review the basics of *global spatial autocorrelation& and then take a deeper dive into *local spatial autocorrelation*.

## Global Spatial Autocorrelation: Review

### Imports

```{python}
import pandas as pd
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import esda
import libpysal as lps
import contextily as cx
```

```{python}
import seaborn as sns
sns.set_context('notebook')
%matplotlib inline
import warnings
warnings.simplefilter("ignore")
```

### Data

For this exercise, we'll use two datasets:

1. a set of polygons (census tracts) for the city of San Diego from the US Census American Community Survey 5-year estimates.


#### Census Polygons

```{python}
scag = gpd.read_parquet("~/data/scag_region.parquet")
```

```{python}
san_diego = scag[scag.geoid.str[:5]=='06073']
```

```{python}
san_diego.info()
```

```{python}
san_diego = san_diego.dropna(subset=['median_home_value'])
```

```{python}
san_diego = san_diego.to_crs(epsg=3857)
```

```{python}
f, ax = plt.subplots(figsize=(10,10))

san_diego.plot('median_home_value', ax=ax, alpha=0.6)
cx.add_basemap(ax, crs=san_diego.crs.to_string(), source=cx.providers.CartoDB.Positron)
ax.axis('off')
```

```{python}
san_diego.median_home_value.hist()
```

```{python}
fig, ax = plt.subplots(figsize=(12,12))

san_diego.dropna(subset=['median_home_value']).to_crs(epsg=3857).plot('median_home_value', legend=True, scheme='quantiles', cmap='GnBu', k=5, ax=ax, alpha=0.7)

cx.add_basemap(ax, crs=san_diego.crs.to_string(), source=cx.providers.CartoDB.Positron)
ax.axis('off')

plt.title("Median Home Value (Quintiles)", fontsize=16)

plt.axis('off')
plt.tight_layout()
```

### Spatial Autocorrelation ##

Visual inspection of the map pattern for the prices allows us to search for
spatial structure. If the spatial distribution of the prices was random, then we
should not see any clustering of similar values on the map. However, our visual
system is drawn to the darker clusters along the coast,
and a concentration of the lighter hues (lower prices) in the north central and
south east. In the point data, the trees are too dense to make any sense of the pattern

Our brains are very powerful pattern recognition machines. However, sometimes
they can be too powerful and lead us to detect false positives, or patterns
where there are no statistical patterns. This is a particular concern when
dealing with visualization of irregular polygons of differning sizes and shapes.

The concept of *spatial
autocorrelation* relates to the combination of two types of similarity: spatial
similarity and attribute similarity. Although there are many different measures
of spatial autocorrelation, they all combine these two types of simmilarity into
a summary measure.

Let's use PySAL to generate these two types of similarity
measures.

### Spatial Similarity ###

We have already encountered spatial weights
in a previous notebook. In spatial autocorrelation analysis, the spatial weights
are used to formalize the notion of spatial similarity. As we have seen there
are many ways to define spatial weights, here we will use queen contiguity:

```{python}
wq =  lps.weights.Queen.from_dataframe(san_diego)
wq.transform = 'r'
```

### Attribute Similarity ###

So the spatial weight between neighborhoods $i$ and $j$ indicates if the two 
are neighbors (i.e., geographically similar). What we also need is a measure of
attribute similarity to pair up with this concept of spatial similarity. The
**spatial lag** is a derived variable that accomplishes this for us. For neighborhood
$i$ the spatial lag is defined as: $$ylag_i = \sum_j w_{i,j} y_j$$

```{python}
y = san_diego['median_home_value']
ylag = lps.weights.lag_spatial(wq, y)
```

```{python}
f, ax = plt.subplots(1, figsize=(12, 12))

san_diego.assign(cl=ylag).plot(column='cl', scheme='quantiles', \
        k=5, cmap='GnBu', linewidth=0.1, ax=ax, \
        edgecolor='white', legend=True)

cx.add_basemap(ax, crs=san_diego.crs.to_string(), source=cx.providers.CartoDB.Positron)
ax.axis('off')

plt.title("Spatial Lag Median Home Val (Quintiles)", fontsize=16)

plt.show()
```

The quintile map for the spatial lag tends to enhance the impression of value
similarity in space. It is, in effect, a local smoother.

```{python}
san_diego['lag_median_pri'] = ylag

f,ax = plt.subplots(1,2,figsize=(12,4))

san_diego.plot(column='median_home_value', ax=ax[0],
        scheme="quantiles",  k=5, cmap='GnBu')

#ax[0].axis(san_diego.total_bounds[np.asarray([0,2,1,3])])
ax[0].set_title("Price", fontsize=16)

san_diego.plot(column='lag_median_pri', ax=ax[1],
        scheme='quantiles', cmap='GnBu', k=5)

cx.add_basemap(ax[0], crs=san_diego.crs.to_string(), source=cx.providers.CartoDB.Positron)

cx.add_basemap(ax[1], crs=san_diego.crs.to_string(), source=cx.providers.CartoDB.Positron)

ax[1].set_title("Spatial Lag Price", fontsize=16)
ax[0].axis('off')
ax[1].axis('off')

plt.show()
```

However, we still have
the challenge of visually associating the value of the prices in a neighborhod
with the value of the spatial lag of values for the focal unit. The latter is a
weighted average of home prices in the focal county's neighborhood.

To complement the geovisualization of these associations we can turn to formal
statistical measures of spatial autocorrelation.


### Global Spatial Autocorrelation


### Join counts ###

One way to formalize a test for spatial autocorrelation in a binary attribute is
to consider the so-called _joins_. A join exists for each neighbor pair of
observations, and the joins are reflected in our binary spatial weights object
`wq`. 

Each unit can take on one of two values "Black" or "White", analogous to the layout of a chessboard

```{python}
nrows, ncols = 9,9
image = np.zeros(nrows*ncols)

# Set every other cell to 1
image[::2] = 1

# Reshape things into a 9x9 grid.
image = image.reshape((nrows, ncols))
plt.matshow(image, cmap='Greys')
plt.axis('off')
plt.show()
```

and so for a given
pair of neighboring locations there are three different types of joins that can
arise:

- Black Black (BB)
- White White (WW)
- Black White (or White Black) (BW)


We can use the `esda` package from PySAL to carry out join count analysis. In the case of our point data, the join counts can help us determine whether different varieties of trees tend to grow together, spread randomly through space, or compete with one another for precious resources

### Polygon Data

With polygon data, we can conduct an analysis using a contiguity matrix. For our housing price data, we need to first discretize the variable we're using; to keep things simple, we'll binarize our price data using the median so that "high" values are tracts whose median home price is above the city's median and "low" values are those below

```{python}
y.median()
```

```{python}
san_diego.shape
```

```{python}
yb = y > y.median()
sum(yb)
```

```{python}
yb = y > y.median()
labels = ["0 Low", "1 High"]
yb = [labels[i] for i in 1*yb] 
san_diego['yb'] = yb
```

```{python}
fig, ax = plt.subplots(figsize=(12,12))
san_diego.plot(column='yb', cmap='binary', edgecolor='grey', legend=True, ax=ax)
```

The spatial distribution of the binary variable immediately raises questions
about the juxtaposition of the "black" and "white" areas.

Given that we have 308 Black polygons on our map, what is the number of Black
Black (BB) joins we could expect if the process were such that the Black
polygons were randomly assigned on the map?

```{python}
yb = 1 * (y > y.median()) # convert back to binary
wq =  lps.weights.Queen.from_dataframe(san_diego)
wq.transform = 'b'
np.random.seed(12345)
jc = esda.join_counts.Join_Counts(yb, wq)
```

The resulting object stores the observed counts for the different types of joins:

```{python}
jc.bb
```

```{python}
jc.ww
```

```{python}
jc.bw
```

Note that the three cases exhaust all possibilities:

```{python}
jc.bb + jc.ww + jc.bw
```

and

```{python}
wq.s0 / 2
```

which is the unique number of joins in the spatial weights object.

Our object tells us we have observed 736 BB joins:

```{python}
jc.bb
```

The critical question for us, is whether this is a departure from what we would
expect if the process generating the spatial distribution of the Black polygons
were a completely random one? To answer this, PySAL uses random spatial
permutations of the observed attribute values to generate a realization under
the null of _complete spatial randomness_ (CSR). This is repeated a large number
of times (999 default) to construct a reference distribution to evaluate the
statistical significance of our observed counts.

The average number of BB joins from the synthetic realizations is:

```{python}
jc.mean_bb
```

which is less than our observed count. The question is whether our observed
value is so different from the expectation that we would reject the null of CSR?

```{python}
import seaborn as sbn
sbn.kdeplot(jc.sim_bb, shade=True)
plt.vlines(jc.bb, 0, 0.005, color='r')
plt.vlines(jc.mean_bb, 0,0.005)
plt.xlabel('BB Counts')
```

The density portrays the distribution of the BB counts, with the black vertical
line indicating the mean BB count from the synthetic realizations and the red
line the observed BB count for our prices. Clearly our observed value is
extremely high. A pseudo p-value summarizes this:

```{python}
jc.p_sim_bb
```

Since this is below conventional significance levels, we would reject the null
of complete spatial randomness in favor of spatial autocorrelation in market prices.


### Continuous Case

The join count analysis is based on a binary attribute, which can cover many
interesting empirical applications where one is interested in presence and
absence type phenomena. In our case, we artificially created the binary variable,
and in the process we throw away a lot of information in our originally
continuous attribute. Turning back to the original variable, we can explore
other tests for spatial autocorrelation for the continuous case.

First, we transform our weights to be row-standardized, from the current binary state:

```{python}
wq.transform = 'r'
```

```{python}
y = san_diego['median_home_value']
```

Moran's I is a test for global autocorrelation for a continuous attribute:

```{python}
np.random.seed(12345)
mi = esda.moran.Moran(y, wq)
mi.I
```

Again, our value for the statistic needs to be interpreted against a reference
distribution under the null of CSR. PySAL uses a similar approach as we saw in
the join count analysis: random spatial permutations.

```{python}
from splot.esda import plot_moran
plot_moran(mi, zstandard=True, figsize=(10,4))
plt.show()
```

```{python}
mi.p_sim
```

On the left, we have the reference distribution versus the observed statistic; on the right, we have a plot of the focal value against its spatial lag, for which the Moran I statistic serves as the slope

Here our observed value is again in the upper tail

```{python}
mi.p_sim
```

## Local Autocorrelation: Hot Spots, Cold Spots, and Spatial Outliers ##

In addition to the Global autocorrelation statistics, PySAL has many local
autocorrelation statistics. Let's compute a local Moran statistic for the same data

```{python}
np.random.seed(12345)
```

```{python}
wq.transform = 'r'
lag_price = lps.weights.lag_spatial(wq, san_diego['median_home_value'])
```

```{python}
li = esda.moran.Moran_Local(y, wq)
```

Now, instead of a single $I$ statistic, we have an *array* of local $I_i$
statistics, stored in the `.Is` attribute, and p-values from the simulation are
in `p_sim`.

```{python}
from splot.esda import moran_scatterplot

fig, ax = moran_scatterplot(li)
ax.set_xlabel('Price')
ax.set_ylabel('Spatial Lag of Price')
plt.show()
```

```{python}
li.q
```

### Inference: Conditional permutations
We can again test for local clustering using permutations, but here we use
conditional random permutations (different distributions for each focal location)

```{python}
(li.p_sim < 0.05).sum()
```

```{python}
fig, ax = moran_scatterplot(li, p=0.05)
ax.set_xlabel('Price')
ax.set_ylabel('Spatial Lag of Price')
plt.show()
```

### Locations of Interest
We can distinguish the specific type of local spatial association reflected in
the four quadrants of the Moran Scatterplot above:
- High-High (upper right)
- Low-Low (bottom left)
- High-Low (lower right)
- Low-High (upper left)

Using `splot`, we can also plot these hotspots on the original geodataframe

```{python}
from splot.esda import lisa_cluster
lisa_cluster(li, san_diego, p=0.05, figsize = (9,9))
plt.show()
```

```{python}
from splot.esda import plot_local_autocorrelation
plot_local_autocorrelation(li, san_diego, 'median_home_value')
```

```{python}
li.Is.shape
```

```{python}
dir(li)
```

```{python}
np.random.seed(12345)
```

```{python}
li = esda.moran.Moran_Local(y, wq, keep_simulations=True)
```

```{python}
sig = np.where(li.p_sim<0.05)
```

```{python}
dir(li)
```

```{python}
li.rlisas.shape
```

```{python}
li.rlisas[sig[0][-1],:]
```

```{python}
sig[0][-1]
```

```{python}
li.Is[626]
```

```{python}
observed = li.Is[626]
null = li.rlisas[626,:]
```

```{python}
(null >= observed).sum()
```

```{python}
li.p_sim[626]
```

```{python}
import seaborn as sbn
sbn.kdeplot(null, shade=True)
plt.vlines(observed,0, 0.2, color='r')
plt.xlabel("Local I for tract 626")
```

```{python}
nsig = np.where(li.p_sim > 0.05)
```

```{python}
nsig[0][0]
```

```{python}
observed = li.Is[0]
null = li.rlisas[0,:]
```

```{python}
import seaborn as sbn
sbn.kdeplot(null, shade=True)
plt.vlines(observed,0, 2.0, color='r')
plt.xlabel("Local I for tract 0")
```

```{python}
li.p_sim[0]
```


